/*
 * Copyright (C) 2014 zulily, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.zulily.omicron.alert;

import com.google.common.collect.ComparisonChain;
import com.zulily.omicron.scheduling.Job;
import org.joda.time.DateTime;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * An alert is a message or notification about the state of a process or groups of processes. They are generated by
 * {@link com.zulily.omicron.sla.Policy} implementations when a {@link Job}
 * is evaluated to be in one of two states: failed and successful.
 * <p>
 * Alerts from failed SLA policies are sent on a configured delay schedule (every 5 minutes, etc)
 * while successful alerts are only sent after a scheduled task leaves a failed SLA state.
 * <p>
 * Tracking and sending failed/successful alerts is implemented in {@link com.zulily.omicron.alert.AlertManager}
 */
public final class Alert implements Comparable<Alert> {

  private final AlertStatus alertStatus;
  private final long createTimestamp = DateTime.now().getMillis();
  private final String message;
  private final Job job;

  /**
   * Constructor
   *
   * @param message     The message generated by the policy evaluation
   * @param job         The job the alert is related to
   * @param alertStatus The state of the alert
   */
  public Alert(
    final String message,
    final Job job,
    final AlertStatus alertStatus
  ) {

    this.message = checkNotNull(message, "message");

    this.job = job;

    this.alertStatus = alertStatus;

  }

  public long getCreateTimestamp() {
    return createTimestamp;
  }

  public String getMessage() {
    return message;
  }

  public Job getJob() {
    return job;
  }

  public AlertStatus getAlertStatus() {
    return alertStatus;
  }

  @SuppressWarnings("NullableProblems")
  @Override
  public int compareTo(Alert o) {
    checkNotNull(o, "compare to null instance");

    return ComparisonChain.start()
      .compare(createTimestamp, o.createTimestamp)
      .compare(message, o.message)
      .result();
  }

  @Override
  public boolean equals(Object o) {
    return o instanceof Alert
      && this.createTimestamp == ((Alert) o).createTimestamp
      && this.message.equals(((Alert) o).message)
      && this.job.getJobId() == ((Alert) o).job.getJobId();

  }


}
